"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

import environ

from core.logging_formatter import CustomJsonFormatter as JsonFormatter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p=@q4-@qda^=-323h4g4yad1vzut-fln3$7bf^&72&((vqf9un'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = []

LOCAL_APPS = [
    "users",
    "library",
]


MIDDLEWARE = [
    "django_tenants.middleware.TenantMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.DomainRestrictionMiddleware"
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "library.context_processors.greeting",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',  # Sử dụng MySQL làm cơ sở dữ liệu
        'NAME': 'quanlysach',  # Tên cơ sở dữ liệu
        'USER': 'postgres',  # Tên đăng nhập
        'PASSWORD': 'Quang123',  # Mật khẩu
        'HOST': 'book-database.cpiziyom2hrl.us-east-1.rds.amazonaws.comgit',  # Mặc định là localhost
        'PORT': '5432',
    }
}
DATABASE_ROUTERS = [
    'django_tenants.routers.TenantSyncRouter',  # Bắt buộc đối với django-tenants
]

SHARED_APPS = [
    'django_tenants',  # Required for tenant management
    'django.contrib.contenttypes',  # Needed for model handling
    'django.contrib.auth',  # Needed for authentication
    'django.contrib.sessions',  # Needed for session management
    'django.contrib.messages',  # Needed for messaging
    'django.contrib.staticfiles',  # For serving static files
    'django.contrib.admin',  # Enable admin site functionality
    'users',  # Your users app
]

TENANT_APPS = [
    'library',  # Tenant-specific apps
]

INSTALLED_APPS = SHARED_APPS + TENANT_APPS


TENANT_APPS = [
    'library',  # App quản lý sách
]

INSTALLED_APPS = SHARED_APPS + TENANT_APPS
TENANT_MODEL = 'users.Tenant'  # Trỏ đến model Tenant trong app users
TENANT_DOMAIN_MODEL = 'users.Domain'  # Trỏ đến model Domain trong app users



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"

if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.Librarian"

LOGIN_URL = "/login/"  # URL mà người dùng sẽ được redirect khi chưa đăng nhập

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": JsonFormatter,
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "json",
        }
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}
